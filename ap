#include <WiFi.h>
#include <EEPROM.h>
#include <WebServer.h>

// EEPROM地址定义
#define EEPROM_SIZE 512
#define SSID_ADDR 0
#define PASSWORD_ADDR 32
#define DEVICE_ID_ADDR 64
#define OUTPUT25_ADDR 96
#define OUTPUT26_ADDR 97

// 创建web服务器对象
WebServer server(80);

// 用于存储输入的SSID、密码、设备ID和初始输出状态
String inputSSID = "";
String inputPassword = "";
String deviceID = "";
String output25State = "off";
String output26State = "off";

// 给GPIO管脚分配输出变量
const int output25 = 25;
const int output26 = 26;

void setup() {
  Serial.begin(115200);
  EEPROM.begin(EEPROM_SIZE);

  // 将输出变量初始化为输出
  pinMode(output25, OUTPUT);
  pinMode(output26, OUTPUT);

  // 从EEPROM读取Wi-Fi凭证
  inputSSID = readStringFromEEPROM(SSID_ADDR);
  inputPassword = readStringFromEEPROM(PASSWORD_ADDR);
  deviceID = readStringFromEEPROM(DEVICE_ID_ADDR);
  output25State = readStringFromEEPROM(OUTPUT25_ADDR);
  output26State = readStringFromEEPROM(OUTPUT26_ADDR);

  // 尝试连接Wi-Fi
  if (inputSSID != "" && inputPassword != "") {
    WiFi.begin(inputSSID.c_str(), inputPassword.c_str());
    Serial.print("Connecting to WiFi");
    int timeout = 0;
    while (WiFi.status() != WL_CONNECTED && timeout < 20) {
      delay(500);
      Serial.print(".");
      timeout++;
    }
    Serial.println();
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to WiFi");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());

    // 设置输出状态
    if (output25State == "on") {
      digitalWrite(output25, HIGH);
    } else {
      digitalWrite(output25, LOW);
    }

    if (output26State == "on") {
      digitalWrite(output26, HIGH);
    } else {
      digitalWrite(output26, LOW);
    }
  } else {
    // 启动AP模式
    WiFi.softAP("ESP32-AP", "12345678");
    Serial.println("Access Point Started");
    Serial.print("IP Address: ");
    Serial.println(WiFi.softAPIP());
  }

  // 处理网页请求
  server.on("/", handleRoot);
  server.on("/step2", handleStep2);
  server.on("/save", handleSave);
  server.begin();
}

void loop() {
  server.handleClient();
}

void handleRoot() {
  logAccess();
  String html = "<!DOCTYPE html><html>";
  html += "<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">";
  html += "<link rel=\"icon\" href=\"data:,\">";
  html += "<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}";
  html += ".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;";
  html += "text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}";
  html += ".button2 {background-color: #555555;}</style></head>";
  html += "<body><h1>ESP32 Configuration - Step 1</h1>";
  html += "<form action=\"/step2\" method=\"post\">";
  html += "SSID: <input type=\"text\" name=\"ssid\" value=\"" + inputSSID + "\"><br>";
  html += "Password: <input type=\"text\" name=\"password\" value=\"" + inputPassword + "\"><br>";
  html += "Device ID: <input type=\"text\" name=\"deviceID\" value=\"" + deviceID + "\"><br>";
  html += "<input type=\"submit\" class=\"button\" value=\"Next\">";
  html += "</form></body></html>";
  
  server.send(200, "text/html", html);
}

void handleStep2() {
  if (server.method() == HTTP_POST) {
    inputSSID = server.arg("ssid");
    inputPassword = server.arg("password");
    deviceID = server.arg("deviceID");

    String html = "<!DOCTYPE html><html>";
    html += "<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">";
    html += "<link rel=\"icon\" href=\"data:,\">";
    html += "<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}";
    html += ".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;";
    html += "text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}";
    html += ".button2 {background-color: #555555;}</style></head>";
    html += "<body><h1>ESP32 Configuration - Step 2</h1>";
    html += "<form action=\"/save\" method=\"post\">";
    html += "Red LED State: <select name=\"output25State\">";
    html += "<option value=\"off\" " + String(output25State == "off" ? "selected" : "") + ">OFF</option>";
    html += "<option value=\"on\" " + String(output25State == "on" ? "selected" : "") + ">ON</option>";
    html += "</select><br>";
    html += "Green LED State: <select name=\"output26State\">";
    html += "<option value=\"off\" " + String(output26State == "off" ? "selected" : "") + ">OFF</option>";
    html += "<option value=\"on\" " + String(output26State == "on" ? "selected" : "") + ">ON</option>";
    html += "</select><br>";
    html += "<input type=\"submit\" class=\"button\" value=\"Save\">";
    html += "</form></body></html>";
    
    server.send(200, "text/html", html);
  } else {
    server.send(405, "text/plain", "Method Not Allowed");
  }
}

void handleSave() {
  if (server.method() == HTTP_POST) {
    output25State = server.arg("output25State");
    output26State = server.arg("output26State");

    if (output25State == "on") {
      digitalWrite(output25, HIGH);
    } else {
      digitalWrite(output25, LOW);
    }

    if (output26State == "on") {
      digitalWrite(output26, HIGH);
    } else {
      digitalWrite(output26, LOW);
    }

    // 保存到EEPROM
    writeStringToEEPROM(SSID_ADDR, inputSSID);
    writeStringToEEPROM(PASSWORD_ADDR, inputPassword);
    writeStringToEEPROM(DEVICE_ID_ADDR, deviceID);
    writeStringToEEPROM(OUTPUT25_ADDR, output25State);
    writeStringToEEPROM(OUTPUT26_ADDR, output26State);
    EEPROM.commit();

    String response = "<!DOCTYPE html><html>";
    response += "<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">";
    response += "<link rel=\"icon\" href=\"data:,\">";
    response += "<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}";
    response += ".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;";
    response += "text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}";
    response += ".button2 {background-color: #555555;}</style></head>";
    response += "<body><h1>Configuration Saved</h1>";
    response += "<p>SSID: " + inputSSID + "</p>";
    response += "<p>Password: " + inputPassword + "</p>";
    response += "<p>Device ID: " + deviceID + "</p>";
    response += "<p>Red LED State: " + output25State + "</p>";
    response += "<p>Green LED State: " + output26State + "</p>";
    response += "</body></html>";

    server.send(200, "text/html", response);
  } else {
    server.send(405, "text/plain", "Method Not Allowed");
  }
}

void logAccess() {
  Serial.println("New client connected");
  Serial.print("Client IP: ");
  Serial.println(WiFi.softAPIP());
  Serial.print("SSID: ");
  Serial.println(inputSSID);
  Serial.print("Password: ");
  Serial.println(inputPassword);
  Serial.print("Device ID: ");
  Serial.println(deviceID);
  Serial.print("Red LED State: ");
  Serial.println(output25State);
  Serial.print("Green LED State: ");
  Serial.println(output26State);
  Serial.println("");
}

String readStringFromEEPROM(int addr) {
  int len = EEPROM.read(addr);
  if (len == 255) return "";
  char data[len + 1];
  for (int i = 0; i < len; i++) {
    data[i] = EEPROM.read(addr + 1 + i);
  }
  data[len] = '\0';
  return String(data);
}

void writeStringToEEPROM(int addr, String data) {
  int len = data.length();
  EEPROM.write(addr, len);
  for (int i = 0; i < len; i++) {
    EEPROM.write(addr + 1 + i, data[i]);
  }
}
